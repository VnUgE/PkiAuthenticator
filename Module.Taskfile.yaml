# https://taskfile.dev

version: '3'

vars:
  INT_DIR: '{{.SCRATCH_DIR}}/obj/{{.MODULE_NAME}}/'
  TARGET: '{{.OUTPUT_DIR}}/{{.HEAD_SHA}}'
  MS_ARGS: '--self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:PublishTrimmed=true /p:RunAnalyzersDuringBuild=false /p:IntermediateOutputPath="{{.INT_DIR}}" /p:UseCommonOutputDirectory=true /p:BuildInParallel=true /p:MultiProcessorCompilation=true'

tasks:
#called by build pipeline to sync repo
  update:
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
     #force remove any local changes and overwite
     - git reset --hard  
     - git remote update
     - git pull origin {{.BRANCH_NAME}} --verify-signatures 
    #re-write semver after hard reset
     - dotnet-gitversion.exe /updateprojectfiles

#called by build pipeline to build module
  build:
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
     - echo "building module {{.MODULE_NAME}}"

     #build debug mode first
     - task: build_debug
     - task: build_release
  
  postbuild_success:
    cmds:
     #git archive in the module directory
     - git archive --format {{.ARCHIVE_FILE_FORMAT}} --output {{.ARCHIVE_FILE_NAME}} HEAD


#called by build pipeline to clean module
  clean:
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
     - echo "Cleanining {{.MODULE_NAME}}"
     #clean solution
     - dotnet clean /p:BuildInParallel=true /p:MultiProcessorCompilation=true


#Internal tasks
  build_debug:
    dir: '{{.USER_WORKING_DIR}}'
    internal: true
    cmds:
     - for: [win-x64, linux-x64, osx-x64, linux-arm, linux-arm64 ]
       cmd: dotnet publish -c debug -r {{.ITEM}} {{.BUILD_FLAGS}} {{.MS_ARGS}}

  build_release:
    dir: '{{.USER_WORKING_DIR}}'
    internal: true
    cmds:
     - for: [win-x64, linux-x64, osx-x64, linux-arm, linux-arm64 ]
       cmd: dotnet publish -c release -r {{.ITEM}} {{.BUILD_FLAGS}} {{.MS_ARGS}}
